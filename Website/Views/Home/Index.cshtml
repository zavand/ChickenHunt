@using System.Security.Principal
@using ChickenHunt.Website.Controllers.Home.Actions.Index
@using ChickenHunt.Website.DataLayer
@model ChickenHunt.Website.Controllers.Home.Actions.Index.Model
@{
    ViewBag.Title = "Home";
}
<style>
    .jumbotron {
        background-color: #fff;
        padding: 0px;
    }

    .sorted-value {
        background-color: yellow;
        padding: 3px;
        border: solid 1px #daa520;
    }
</style>
<div class="row text-center">
    <div class="col-md-12 col-sm-12">
        <img src="~/Content/Images/Logo.png"/>
    </div>
</div>
<div class="text-center hidden-print">
    <a href="@Url.RouteUrl(Model.GetRoute(), ChickenHunt.Website.Controllers.Home.Actions.Chicken2.Route.Create())" class="btn btn-default">
        <img src="~/Content/Images/LogoIcon.png"/> Report chicken</a>
</div>
<br/>

@* Build report *@

@{
    var periods = Enumerable.Range(0,Model.Months).Select(n=>new
    {
        From = DateTime.Today.AddDays(-DateTime.Today.Day+1).AddMonths(-n),
        To = DateTime.Today.AddDays(-DateTime.Today.Day+1).AddMonths(-n+1),
    })
    .ToList();

    // Insert current year
    periods.Insert(0,new
    {
        From = DateTime.Today.AddDays(-DateTime.Today.Day + 1).AddMonths(-DateTime.Today.Month+1),
        To = DateTime.Today.AddDays(-DateTime.Today.Day + 1).AddMonths(-DateTime.Today.Month + 1).AddYears(1)
    });

    // Insert previous year
    var prevYear = new
    {
        From = DateTime.Today.AddDays(-DateTime.Today.Day + 1).AddMonths(-DateTime.Today.Month + 1).AddYears(-1),
        To = DateTime.Today.AddDays(-DateTime.Today.Day + 1).AddMonths(-DateTime.Today.Month + 1)
    };
    bool inserted = false;
    for (int i = 0; i < periods.Count; i++)
    {
        if (prevYear.To == periods[i].To)
        {
            periods.Insert(i,prevYear);
            inserted = true;
            break;
        }
    }
    if (!inserted)
    {
        periods.Add(prevYear);
    }

    var nonDeletedChickens = Model.Chickens
        .Where(m => m.DeletedByHunterID == null).ToArray();

    var items = new  int[0].Select(a=>new { HunterID =0, HunterName = "", ChickenDate = DateTime.MinValue, M = 0, C = 0, K = 0 }).ToList();

    for (int i = 0; i < nonDeletedChickens.Length; i++)
    {
        var m = nonDeletedChickens[i];
        items.Add(new { HunterID = m.Maker1ID, HunterName = m.Maker1Name, m.ChickenDate, M = m.ChickenCount, C = 0, K = 0 });
        items.Add(new { HunterID = m.Maker2ID, HunterName = m.Maker2Name, m.ChickenDate, M = m.ChickenCount, C = 0, K = 0 });
        items.Add(new { HunterID = m.Recipient1ID, HunterName = m.Recipient1Name, m.ChickenDate, M = 0, C = m.ChickenCount, K = 0 });
        items.Add(new { HunterID = m.Recipient2ID, HunterName = m.Recipient2Name, m.ChickenDate, M = 0, C = m.ChickenCount, K = 0 });
    }

    var rr = items
.GroupBy(m => new {m.HunterID, m.HunterName})
.Select(m => new
{
    m.Key.HunterID,
    m.Key.HunterName,
    Periods = periods.Select(p =>
    {
        var maxMade = nonDeletedChickens.Where(a => a.ChickenDate >= p.From && a.ChickenDate < p.To && (a.Maker1ID == m.Key.HunterID || a.Maker2ID == m.Key.HunterID))
            .GroupBy(a => new
            {
                HunterID = a.Maker1ID == m.Key.HunterID ? a.Maker2ID : a.Maker1ID,
                HunterName = a.Maker1ID == m.Key.HunterID ? a.Maker2Name : a.Maker1Name,
            })
            .Select(a => new
            {
                a.Key.HunterID,
                a.Key.HunterName,
                Count = a.Sum(b => b.ChickenCount)
            })
            .OrderByDescending(a => a.Count)
            .ToArray()
            ;

        var maxReceived = nonDeletedChickens.Where(a => a.ChickenDate >= p.From && a.ChickenDate < p.To && (a.Recipient1ID == m.Key.HunterID || a.Recipient2ID == m.Key.HunterID))
            .GroupBy(a => new
            {
                HunterID = a.Recipient1ID == m.Key.HunterID ? a.Recipient2ID : a.Recipient1ID,
                HunterName = a.Recipient1ID == m.Key.HunterID ? a.Recipient2Name : a.Recipient1Name,
            })
            .Select(a => new
            {
                a.Key.HunterID,
                a.Key.HunterName,
                Count = a.Sum(b => b.ChickenCount)
            })
            .OrderByDescending(a => a.Count)
            .ToArray()
            ;

        var result = new
        {
            p.From,
            p.To,
            C = m.Where(a => a.ChickenDate >= p.From && a.ChickenDate < p.To).Sum(a => a.C),
            M = m.Where(a => a.ChickenDate >= p.From && a.ChickenDate < p.To).Sum(a => a.M),
            Best = maxMade.Where(a => a.Count == (maxMade.FirstOrDefault()?.Count ?? 0)).ToArray(),
            Worst = maxReceived.Where(a => a.Count == (maxReceived.FirstOrDefault()?.Count ?? 0)).ToArray()
        };
        return result;
    }).ToArray()
})
.ToArray()
;

    if (Model.SortAsc)
    {
        rr = rr.OrderBy(m =>
        {
            var period = m.Periods.FirstOrDefault(p => p.From == Model.SortPeriodFrom && p.To==Model.SortPeriodTo);
            if (period == null || period.C == 0 && period.M == 0)
            {
                return int.MaxValue;
            }
            switch (Model.SortBy)
            {
                case SortType.R:
                    return period.C;
                case SortType.M:
                    return period.M;
                case SortType.B:
                    return period.M-period.C;
                case SortType.K:
                    return (period.M + period.C)==0?0:(double)period.M/(period.M + period.C);
                case SortType.T:
                    {
                        var b = period.M - period.C;
                        var k = (period.M + period.C) == 0 ? 0 : (double)period.M / (period.M + period.C);
                        var t = (b < 0 ? 1.0 - k : k) * b;
                        return t;
                    }
            }
            return 0;
        })
        .ThenBy(m => m.HunterName)
        .ToArray();
    }
    else
    {
        rr = rr.OrderByDescending(m =>
        {
            var period = m.Periods.FirstOrDefault(p => p.From == Model.SortPeriodFrom && p.To == Model.SortPeriodTo);
            if (period == null || period.C == 0 && period.M == 0)
            {
                return int.MinValue;
            }
            switch (Model.SortBy)
            {
                case SortType.R:
                    return period.C;
                case SortType.M:
                    return period.M;
                case SortType.B:
                    return period.M - period.C;
                case SortType.K:
                    return (period.M + period.C) == 0 ? 0 : (double) period.M / (period.M + period.C);
                case SortType.T:
                    {
                        var b = period.M - period.C;
                        var k = (period.M + period.C) == 0 ? 0 : (double) period.M / (period.M + period.C);
                        var t = (b < 0 ? 1.0 - k : k) * b;
                        return t;
                    }
            }
            return 0;
        })
        .ThenBy(m=>m.HunterName)
        .ToArray();
    }
}

<div class="text-center">
    <span class = "btn btn-primary">Months:</span>
    @foreach (var months in Enumerable.Range(1, 12))
    {
        @Html.ActionLinkClone(months.ToString(), Model.GetRoute(), m => { m.Months = months; }, new {@class = "btn " + (Model.Months==months? "btn-info": "btn-default") })
    }
</div>
<br />
@functions
{

    MvcHtmlString ShowButton(SortType st, string text=null)
    {
        return Html.ActionLinkClone(String.IsNullOrEmpty(text)?st.ToString(): text, Model.GetRoute(), m =>
        {
            if (Model.Show.Contains(st))
            {
                m.Show = m.Show.Replace(st.ToString(), "");
            }
            else
            {
                m.Show += st.ToString();
            }
        }, new {@class = "btn btn-xs" + (Model.Show.Contains(st) ? " btn-primary" : " btn-default")});
    }
}
<div class="text-center">
    <span>@ShowButton(SortType.R) Received</span>
    <span>@ShowButton(SortType.M) Made</span>
    <span>@ShowButton(SortType.B) = M - R</span>
    <span>@ShowButton(SortType.K) = M / (M + R)</span>
    <span>@ShowButton(SortType.T) = B >= 0: <span style="text-decoration: underline">K * B</span>; B < 0: <span style="text-decoration: underline">(1 - K) * B</span></span>
    <span>@ShowButton(SortType.W, "Show best/worst partners")</span>
</div>
<br />
<table class="table table-hover table-responsive">
    <tr>
        <th>Hunter</th>
        @for (var i = 0; i < periods.Count; i++)
        {
            var p = periods[i];
            <th class="text-center" style="background-color: @((p.To-p.From).TotalDays>31?"gold":"inherited");">
                @((p.To-p.From).TotalDays>31 ? p.From.ToString("yyyy") : p.From.ToString("MMMM"))
                <div>
                    @{
                        var sortPeriodFormat = (p.To - p.From).TotalDays > 31 ? "yyyy" : "yyyyMM";
                        var sortIndicatorB = "";
                        var sortIndicatorK = "";
                        var sortIndicatorT = "";
                        var sortIndicatorC = "";
                        var sortIndicatorM = "";
                        if (Model.SortPeriodFrom == p.From && Model.SortPeriodTo==p.To)
                        {
                            var ind = Model.SortAsc ? " <i class=\"fa fa-sort-asc\"></i>" : "  <i class=\"fa fa-sort-desc\"></i>";
                            switch (Model.SortBy)
                            {
                                case SortType.B:
                                    sortIndicatorB = ind;
                                    break;
                                case SortType.K:
                                    sortIndicatorK = ind;
                                    break;
                                case SortType.T:
                                    sortIndicatorT = ind;
                                    break;
                                case SortType.R:
                                    sortIndicatorC = ind;
                                    break;
                                case SortType.M:
                                    sortIndicatorM = ind;
                                    break;
                            }
                        }
                    }
                    @if (Model.Show.Contains(SortType.T))
                    {
                        @Html.ActionLinkClone("T" + sortIndicatorT, Model.GetRoute(), r => { r.SortAsc = p.From == Model.SortPeriod && Model.SortBy == SortType.T && !Model.SortAsc; r.SortBy = SortType.T; r.SortPeriod = p.From.ToString(sortPeriodFormat); }, new { @class = "btn btn-xs " + (String.IsNullOrEmpty(sortIndicatorT) ? "btn-default" : "btn-primary") })
                    }
                    @if (Model.Show.Contains(SortType.K))
                    {
                        @Html.ActionLinkClone("K" + sortIndicatorK, Model.GetRoute(), r => { r.SortAsc = p.From == Model.SortPeriod && Model.SortBy == SortType.K && !Model.SortAsc; r.SortBy = SortType.K; r.SortPeriod = p.From.ToString(sortPeriodFormat); }, new { @class = "btn btn-xs " + (String.IsNullOrEmpty(sortIndicatorK) ? "btn-default" : "btn-primary") })
                    }
                    @if (Model.Show.Contains(SortType.B))
                    {
                        @Html.ActionLinkClone("B" + sortIndicatorB, Model.GetRoute(), r => { r.SortAsc = p.From == Model.SortPeriod && Model.SortBy == SortType.B && !Model.SortAsc; r.SortBy = SortType.B; r.SortPeriod = p.From.ToString(sortPeriodFormat); }, new { @class = "btn btn-xs " + (String.IsNullOrEmpty(sortIndicatorB) ? "btn-default" : "btn-primary") })
                    }
                    @if (Model.Show.Contains(SortType.R))
                    {
                        @Html.ActionLinkClone("R" + sortIndicatorC, Model.GetRoute(), r => { r.SortAsc = p.From == Model.SortPeriod && Model.SortBy == SortType.R && !Model.SortAsc; r.SortBy = SortType.R; r.SortPeriod = p.From.ToString(sortPeriodFormat); }, new { @class = "btn btn-xs " + (String.IsNullOrEmpty(sortIndicatorC) ? "btn-default" : "btn-primary") })
                    }
                    @if (Model.Show.Contains(SortType.M))
                    {
                        @Html.ActionLinkClone("M" + sortIndicatorM, Model.GetRoute(), r => { r.SortAsc = p.From == Model.SortPeriod && Model.SortBy == SortType.M && !Model.SortAsc; r.SortBy = SortType.M; r.SortPeriod = p.From.ToString(sortPeriodFormat); }, new { @class = "btn btn-xs " + (String.IsNullOrEmpty(sortIndicatorM) ? "btn-default" : "btn-primary") })
                    }
                </div>
            </th>
        }
    </tr>
    
    @foreach (var r in rr)
    {
        <tr>
            <td>@Html.ActionLink(r.HunterName, Model.GetRoute(), ChickenHunt.Website.Controllers.Hunter.Actions.Index.Route.Create(r.HunterID))</td>
            @for (var i = 0; i < r.Periods.Length; i++)
            {
                var p = r.Periods[i];
                int receivedToday = 0;
                int madeToday = 0;
                if (i == 1)
                {
                    // Current month
                    receivedToday = nonDeletedChickens.Where(m => m.ChickenDate.Date == DateTime.Today && (m.Recipient1ID==r.HunterID || m.Recipient2ID==r.HunterID)).Sum(m=>m.ChickenCount);
                    madeToday = nonDeletedChickens.Where(m => m.ChickenDate.Date == DateTime.Today && (m.Maker1ID==r.HunterID || m.Maker2ID==r.HunterID)).Sum(m=>m.ChickenCount);
                }
                var sortedPeriod = Model.SortPeriodFrom == p.From && Model.SortPeriodTo == p.To;

                <td class="text-center" style="background-color: @((p.To - p.From).TotalDays > 31 ? "gold" : "inherited");">
                    <div style="white-space: nowrap;">
                        @{
                            var b = p.M - p.C;
                            var k = (p.M + p.C) == 0 ? 0 : (double) p.M / (p.M + p.C);
                            var t = (b < 0 ? 1.0 - k : k) * b;
                        }
                        @if (Model.Show.Contains(SortType.T))
                        {
                            <text><span class="@(sortedPeriod && Model.SortBy == SortType.T ? "sorted-value" : "")">@(t.ToString("#,0.00"))</span></text>
                            if (Model.Show.Any(m=>new []{ SortType.K,SortType.B,SortType.R,SortType.M }.Contains(m)))
                            {
                                <text> / </text>
                            }
                        }
                        @if (Model.Show.Contains(SortType.K))
                        {
                            <span class="@(sortedPeriod && Model.SortBy == SortType.K ? "sorted-value" : "")">@(k.ToString("#,0.00"))</span>
                            if (Model.Show.Any(m => new[] { SortType.B, SortType.R, SortType.M }.Contains(m)))
                            {
                                <text> / </text>
                            }
                        }
                        @if (Model.Show.Contains(SortType.B))
                        {
                            <span class="@(sortedPeriod && Model.SortBy == SortType.B ? "sorted-value" : "")">@(b)</span>
                            if (Model.Show.Any(m => new[] { SortType.R, SortType.M }.Contains(m)))
                            {
                                <text> / </text>
                            }
                        }
                        @if (Model.Show.Contains(SortType.R))
                        {
                            <span class="@(sortedPeriod && Model.SortBy == SortType.R ? "sorted-value" : "")" style="color: red;">@p.C</span>
                            if (Model.Show.Any(m => new[] { SortType.M }.Contains(m)))
                            {
                                <text> / </text>
                            }
                        }
                        @if (Model.Show.Contains(SortType.M))
                        {
                            <span class="@(sortedPeriod && Model.SortBy == SortType.M ? "sorted-value" : "")" style="color: green;">@p.M</span>
                        }
                    </div>
                    @if (receivedToday + madeToday > 0)
                    {
                        <div>
                            @if (receivedToday > 0)
                            {
                                <span class="label label-danger"><i class="fa fa-line-chart" aria-hidden="true"></i> +@receivedToday</span>
                            }
                            @if (madeToday > 0)
                            {
                                <span class="label label-success"><i class="fa fa-line-chart" aria-hidden="true"></i> +@madeToday</span>
                            }
                        </div>
                    }
                    @if (Model.Show.Contains(SortType.W))
                    {
                        <div style="font-size: 0.75em;">
                            <span style="color: red;" title="The worst partner(s)">@String.Join(", ", p.Worst.Select(m => m.HunterName))</span>
                            <span style="color: green;" title="The best partner(s)">@String.Join(", ", p.Best.Select(m => m.HunterName))</span>
                        </div>
                    }
                </td>
            }
        </tr>
    }
</table>


<h2 class="text-center"><a name="RecentChickens"></a>Recent chickens</h2>
@if (Model.Chickens.Length == 0)
{
    <div class="alert alert-info">No records found</div>
}
else
{
    <text>
        <div class="row">
            <div class="col-sm-12 text-center">
                @{ var size = 10; }
                <a href="@Url.RouteUrl(Model.GetRoute(),ChickenHunt.Website.Controllers.Home.Actions.Index.Route.Create(size))#RecentChickens" class="btn btn-sm @(Model.RecentChickens == size ? " btn-primary" : " btn-default")">@size</a>
                @{ size = 20; }
                <a href="@Url.RouteUrl(Model.GetRoute(),ChickenHunt.Website.Controllers.Home.Actions.Index.Route.Create(size))#RecentChickens" class="btn btn-sm @(Model.RecentChickens == size ? " btn-primary" : " btn-default")">@size</a>
                @{ size = 25; }
                <a href="@Url.RouteUrl(Model.GetRoute(),ChickenHunt.Website.Controllers.Home.Actions.Index.Route.Create(size))#RecentChickens" class="btn btn-sm @(Model.RecentChickens == size ? " btn-primary" : " btn-default")">@size</a>
                @{ size = 50; }
                <a href="@Url.RouteUrl(Model.GetRoute(),ChickenHunt.Website.Controllers.Home.Actions.Index.Route.Create(size))#RecentChickens" class="btn btn-sm @(Model.RecentChickens == size ? " btn-primary" : " btn-default")">@size</a>
                @{ size = 100; }
                <a href="@Url.RouteUrl(Model.GetRoute(),ChickenHunt.Website.Controllers.Home.Actions.Index.Route.Create(size))#RecentChickens" class="btn btn-sm @(Model.RecentChickens == size ? " btn-primary" : " btn-default")">@size</a>
            </div>
        </div>
    </text>
    foreach (var c in Model.Chickens.OrderByDescending(m=>m.CreateDate).Take(Model.RecentChickens))
    {


        <div class="row" style="border: solid 1px @(c.DeletedByHunterID==null?"#eee":"red"); margin: 5px; background-color: @(c.DeletedByHunterID==null?"inherited":"mistyrose"); ">
            <div class="col-sm-1 col-xs-2 col-md-1 text-center">
                x<span style="font-size: 30pt;">@(c.ChickenCount)</span>
            </div>
            <div class="col-sm-3 col-xs-5 col-md-3">
                <div class="media">
                    <div class="media-left">
                        <img src="~/Content/Images/Maker.png" />
                    </div>
                    <div class="media-body" style="text-decoration: @(c.DeletedByHunterID==null?"initial":"line-through");">
                        @c.Maker1Name<br />@c.Maker2Name
                    </div>
                </div>
            </div>
            <div class="col-sm-3 col-xs-5 col-md-3">
                <div class="media">
                    <div class="media-left">
                        <img src="~/Content/Images/Recipient.png" />
                    </div>
                    <div class="media-body" style="text-decoration: @(c.DeletedByHunterID==null?"initial":"line-through");">
                        @c.Recipient1Name <br />@c.Recipient2Name
                    </div>
                </div>
            </div>
            <div class="col-sm-5 col-xs-10 col-md-5">
                <span class="pull-right text-right">
                    <small>
                        Reported by <strong>@c.ReporterName</strong> |

                        @if (c.CreateDate.Date == DateTime.Now.Date)
                {
                    <text>
                        <span class="label label-success">Today</span>
                    </text>
        }
        else
        {
            @c.CreateDate.ToLongDateString()
}
                        <br />
                        @if (c.DeletedByHunterID == null)
                {
                    if (User.Identity.IsAuthenticated && (DateTime.Now - c.CreateDate) < TimeSpan.FromDays(2))
                    {
                        <text>
                            @Html.ActionLink("Delete", Model.GetRoute(), ChickenHunt.Website.Controllers.Home.Actions.DeleteChicken.Route.Create(c.ID), new { @class = "btn btn-xs btn-danger" })
                        </text>
            }
        }
        else
        {
            <text>
                <span class="label label-danger">Deleted by @c.DeletedByHunterName</span>
            </text>
}
                    </small>
                </span>
            </div>
        </div>
    }
}


@{
    @*FormsAuthenticationTicket ticket = null;
    var c2 = System.Web.HttpContext.Current.Request.Cookies[FormsAuthentication.FormsCookieName];

    if (c2 != null)
    {
        ticket = FormsAuthentication.Decrypt(c2.Value);
        <div>Cookie found value: @c2.Value | ticket: @ticket</div>
        if (ticket != null)
        {
            <div>ticket.CookiePath: @ticket.CookiePath</div>
            <div>ticket.Expiration: @ticket.Expiration</div>
            <div>ticket.Expired: @ticket.Expired</div>
            <div>ticket.IsPersistent: @ticket.IsPersistent</div>
            <div>ticket.IssueDate: @ticket.IssueDate</div>
            <div>ticket.Name: @ticket.Name</div>
            <div>ticket.UserData: @ticket.UserData</div>
            <div>ticket.Version: @ticket.Version</div>
        }
    }
    else
    {
        <div>Cookie NOT found</div>
    }*@
}